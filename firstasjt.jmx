<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers"/>
      </HeaderManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">/priceint.csv</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">nr,denumire,um,pret,pret10</stringProp>
      </CSVDataSet>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="connectionProperties"></stringProp>
        <stringProp name="dataSource">tutorials</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://localhost\MSSQLSERVER:1433;database=Tutorial1</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">Miha10Gabi11</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">sa</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="startSelect" elementType="Argument">
            <stringProp name="Argument.name">startSelect</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="startSelect2" elementType="Argument">
            <stringProp name="Argument.name">startSelect2</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="startInsert" elementType="Argument">
            <stringProp name="Argument.name">startInsert</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="startDelete" elementType="Argument">
            <stringProp name="Argument.name">startDelete</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="startWrite" elementType="Argument">
            <stringProp name="Argument.name">startWrite</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="totalResult" elementType="Argument">
            <stringProp name="Argument.name">totalResult</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="interResult" elementType="Argument">
            <stringProp name="Argument.name">interResult</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(loops,3)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(users,3)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,5)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SQL Operations" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select 1" enabled="true">
            <stringProp name="dataSource">tutorials</stringProp>
            <stringProp name="query">select * from pricecarote;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as Object</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">totalResult</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;  //jmeter spelling corrected
import java.util.Date
import java.text.*;  
import java.util.Calendar;  

try {

Date dataStart = new Date();

long longMsStart = dataStart.getTime();
String StringMsStart = String.valueOf(longMsStart);

vars.putObject(&quot;startSelect&quot;, StringMsStart);

}

catch (Throwable ex) {
    log.error(&quot;Failed get the starting time for Select !!!&quot;, ex);
}
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;  //jmeter spelling corrected
import org.apache.commons.io.FileUtils;
import java.util.Date
import java.text.DateFormat;  
import java.text.SimpleDateFormat;  
import java.util.Date;  
import java.util.Calendar;  
import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Arrays;
import java.io.Writer;
import org.apache.commons.io.FilenameUtils;

try {

String testPlanFile = FileServer.getFileServer().getBaseDir();

String path = testPlanFile + &quot;\\\\TimesFile.csv&quot;;

Date dataEnd = new Date();
long longMsEnd = dataEnd.getTime();

String stringMsStart = vars.getObject(&quot;startSelect&quot;);
long longMsStart = Long.parseLong(stringMsStart);

long difference = longMsEnd - longMsStart;

var writer = new java.io.PrintWriter(new FileWriter(path,true));

writer.println(&quot;Select Execution time:,&quot; + String.valueOf(difference) + &quot;,&quot; + &quot;Ms&quot;);

writer.close();
log.info(&quot;Select: start:&quot; + String.valueOf(longMsStart) + &quot;end: &quot; + String.valueOf(longMsEnd)  + &quot;difference: &quot; + String.valueOf(difference) +&quot;\n&quot;);
vars.putObject(&quot;startSelect&quot;, &quot;0&quot;);

}catch (Throwable ex) {
    log.error(&quot;Failed calculate the Select duration !!!&quot;, ex);
}

</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append First Result" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.io.File;
import org.apache.jmeter.services.FileServer;  
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.ArrayList; 


//ArrayList intResult = vars.getObject(&quot;interResult&quot;);
ArrayList totResult = vars.getObject(&quot;totalResult&quot;);

HashMap resTitle =  new HashMap();

resTitle.put( &quot;title&quot;, &quot;\nResults for Select:,\n&quot;);

HashMap colTitle = new HashMap(totResult.get(0));


for(String i : colTitle.keySet()){
	
	colTitle.put(i,i);
	}
	
totResult.add(0,colTitle);
totResult.add(0,resTitle);

vars.putObject(&quot;totalResult&quot;, totResult);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Insert" enabled="true">
            <stringProp name="dataSource">tutorials</stringProp>
            <stringProp name="query">insert into pricecarote
(Denumire_Articol,U_M,Pret,Pret_10)
VALUES
(&apos;${denumire}&apos;,&apos;${um}&apos;,&apos;${pret}&apos;,&apos;${pret10}&apos;)
select * from pricecarote;


</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as Object</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">interResult</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;  //jmeter spelling corrected
import java.util.Date
import java.text.*;  
import java.util.Calendar;  

try{

Date dataStart = new Date();

long longMsStart = dataStart.getTime();
String StringMsStart = String.valueOf(longMsStart);

vars.putObject(&quot;startInsert&quot;, StringMsStart);

}catch (Throwable ex) {
    log.error(&quot;Failed get the starting time for Insert !!!&quot;, ex);
}
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;  
import org.apache.commons.io.FileUtils;
import java.util.Date
import java.text.DateFormat;  
import java.text.SimpleDateFormat;  
import java.util.Date;  
import java.util.Calendar;  
import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Arrays;
import java.io.Writer;
import org.apache.jmeter.gui.GuiPackage;
import org.apache.commons.io.FilenameUtils;

try{

String testPlanFile = FileServer.getFileServer().getBaseDir();

String path = testPlanFile + &quot;\\\\TimesFile.csv&quot;;

Date dataEnd = new Date();
long longMsEnd = dataEnd.getTime();

String stringMsStart = vars.getObject(&quot;startInsert&quot;);
long longMsStart = Long.parseLong(stringMsStart);

long difference = longMsEnd - longMsStart;

var writer = new java.io.PrintWriter(new FileWriter(path,true));

writer.println(&quot;Insert Execution time:,&quot; + String.valueOf(difference) + &quot;,&quot; + &quot;Ms&quot;);

writer.close();
log.info(&quot;Insert: start:&quot; + String.valueOf(longMsStart) + &quot;end: &quot; + String.valueOf(longMsEnd)  + &quot;difference: &quot; + String.valueOf(difference) +&quot;\n&quot;);
vars.putObject(&quot;startInsert&quot;, &quot;0&quot;);

}catch (Throwable ex) {
    log.error(&quot;Failed calculate the Insert duration !!!&quot;, ex);
}
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append Result" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.io.File;
import org.apache.jmeter.services.FileServer;  //jmeter spelling corrected
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.ArrayList; // import the ArrayList class


ArrayList intResult = vars.getObject(&quot;interResult&quot;);
ArrayList totResult = vars.getObject(&quot;totalResult&quot;);

HashMap resTitle =  new HashMap();

resTitle.put( &quot;title&quot;, &quot;\nResults for Insert:,\n&quot;);

HashMap colTitle = new HashMap(intResult.get(0));
intResult.add(0,colTitle);

for(String i : intResult.get(0).keySet()){
	
	colTitle.put(i,i);
	}

intResult.add(0,resTitle);

totResult.addAll(intResult);

vars.putObject(&quot;totalResult&quot;, totResult);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Select2" enabled="true">
            <stringProp name="dataSource">tutorials</stringProp>
            <stringProp name="query">select Nr from pricecarote
where Pret in (select max(Pret) from pricecarote);

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">prodid</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;  //jmeter spelling corrected
import java.util.Date
import java.text.*;  
import java.util.Calendar;  

try{

Date dataStart = new Date();

long longMsStart = dataStart.getTime();
String StringMsStart = String.valueOf(longMsStart);

vars.putObject(&quot;startSelect2&quot;, StringMsStart);

}catch (Throwable ex) {
    log.error(&quot;Failed get the starting time for Select Id !!!&quot;, ex);
}
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">maxid</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">Not found</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;  
import org.apache.commons.io.FileUtils;
import java.util.Date
import java.text.DateFormat;  
import java.text.SimpleDateFormat;  
import java.util.Date;  
import java.util.Calendar;  
import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Arrays;
import java.io.Writer;
import org.apache.jmeter.gui.GuiPackage;
import org.apache.commons.io.FilenameUtils;

try{

String testPlanFile = FileServer.getFileServer().getBaseDir();

String path = testPlanFile + &quot;\\\\TimesFile.csv&quot;;

Date dataEnd = new Date();
long longMsEnd = dataEnd.getTime();

String stringMsStart = vars.getObject(&quot;startSelect2&quot;);
long longMsStart = Long.parseLong(stringMsStart);

long difference = longMsEnd - longMsStart;

var writer = new java.io.PrintWriter(new FileWriter(path,true));

writer.println(&quot;Select with Id reteiving Execution time:,&quot; + String.valueOf(difference) + &quot;,&quot; + &quot;Ms&quot;);

writer.close();
log.info(&quot;Select2: start:&quot; + String.valueOf(longMsStart) + &quot;end: &quot; + String.valueOf(longMsEnd)  + &quot;difference: &quot; + String.valueOf(difference) +&quot;\n&quot;);

vars.putObject(&quot;startSelect2&quot;, &quot;0&quot;);

}catch (Throwable ex) {
    log.error(&quot;Failed calculate the Select1 duration !!!&quot;, ex);
}

</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Update" enabled="true">
            <stringProp name="dataSource">tutorials</stringProp>
            <stringProp name="query">update pricecarote
set Pret = ${pret} + 200
where Nr = ${maxid}
select * from pricecarote;

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">interResult</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;  
import java.util.Date
import java.text.*;  
import java.util.Calendar;  

try{
	
Date dataStart = new Date();

long longMsStart = dataStart.getTime();
String StringMsStart = String.valueOf(longMsStart);

vars.putObject(&quot;startSelect2&quot;, StringMsStart);

}catch (Throwable ex) {
    log.error(&quot;Failed get the starting time for Update !!!&quot;, ex);
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer; 
import org.apache.commons.io.FileUtils;
import java.util.Date
import java.text.DateFormat;  
import java.text.SimpleDateFormat;  
import java.util.Date;  
import java.util.Calendar;  
import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Arrays;
import java.io.Writer;
import org.apache.jmeter.gui.GuiPackage;
import org.apache.commons.io.FilenameUtils;

try{

String testPlanFile = FileServer.getFileServer().getBaseDir();

String path = testPlanFile + &quot;\\\\TimesFile.csv&quot;;

Date dataEnd = new Date();
long longMsEnd = dataEnd.getTime();

String stringMsStart = vars.getObject(&quot;startSelect2&quot;);
long longMsStart = Long.parseLong(stringMsStart);

long difference = longMsEnd - longMsStart;

var writer = new java.io.PrintWriter(new FileWriter(path,true));

writer.println(&quot;Update Execution time:,&quot; + String.valueOf(difference) + &quot;,&quot; + &quot;Ms&quot;);

writer.close();
log.info(&quot;Update: start:&quot; + String.valueOf(longMsStart) + &quot;end: &quot; + String.valueOf(longMsEnd)  + &quot;difference: &quot; + String.valueOf(difference) +&quot;\n&quot;);

vars.putObject(&quot;startSelect2&quot;, &quot;0&quot;);

}catch (Throwable ex) {
    log.error(&quot;Failed calculate the Update duration !!!&quot;, ex);
}

</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append Result" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.io.File;
import org.apache.jmeter.services.FileServer;  
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.ArrayList; // import the ArrayList class


ArrayList intResult = vars.getObject(&quot;interResult&quot;);
ArrayList totResult = vars.getObject(&quot;totalResult&quot;);


HashMap resTitle =  new HashMap();

resTitle.put( &quot;title&quot;, &quot;\nResults for Update:,\n&quot;);


HashMap colTitle = new HashMap(intResult.get(0));
intResult.add(0,colTitle);

for(String i : intResult.get(0).keySet()){
	
	colTitle.put(i,i);
	}

intResult.add(0,resTitle);

totResult.addAll(intResult);

vars.putObject(&quot;totalResult&quot;, totResult);

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete" enabled="true">
            <stringProp name="dataSource">tutorials</stringProp>
            <stringProp name="query">delete from pricecarote
where nr = ${maxid}
select * from pricecarote;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable">interResult</stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;  //jmeter spelling corrected
import java.util.Date
import java.text.*;  
import java.util.Calendar;  

try{

Date dataStart = new Date();

long longMsStart = dataStart.getTime();
String StringMsStart = String.valueOf(longMsStart);

vars.putObject(&quot;startDelete&quot;, StringMsStart);

}catch (Throwable ex) {
    log.error(&quot;Failed get the starting time for Delete !!!&quot;, ex);
}
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;
import org.apache.commons.io.FileUtils;
import java.util.Date
import java.text.DateFormat;  
import java.text.SimpleDateFormat;  
import java.util.Date;  
import java.util.Calendar;  
import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Arrays;
import java.io.Writer;
import org.apache.jmeter.gui.GuiPackage;
import org.apache.commons.io.FilenameUtils;

try{

String testPlanFile = FileServer.getFileServer().getBaseDir();

String path = testPlanFile + &quot;\\\\TimesFile.csv&quot;;

Date dataEnd = new Date();
long longMsEnd = dataEnd.getTime();

String stringMsStart = vars.getObject(&quot;startDelete&quot;);
long longMsStart = Long.parseLong(stringMsStart);

long difference = longMsEnd - longMsStart;

var writer = new java.io.PrintWriter(new FileWriter(path,true));

writer.println(&quot;Delete Execution time:,&quot; + String.valueOf(difference) + &quot;,&quot; + &quot;Ms&quot;);

writer.close();
log.info(&quot;Delete: start:&quot; + String.valueOf(longMsStart) + &quot;end: &quot; + String.valueOf(longMsEnd)  + &quot;difference: &quot; + String.valueOf(difference) +&quot;\n&quot;);

vars.putObject(&quot;startDelete&quot;, &quot;0&quot;);

}catch (Throwable ex) {
    log.error(&quot;Failed calculate the Delete duration !!!&quot;, ex);
}

</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Append Result" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.io.File;
import org.apache.jmeter.services.FileServer;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.ArrayList; 

ArrayList intResult = vars.getObject(&quot;interResult&quot;);
ArrayList totResult = vars.getObject(&quot;totalResult&quot;);

HashMap resTitle =  new HashMap();

resTitle.put( &quot;title&quot;, &quot;\nResults for Delete:,\n&quot;);

HashMap colTitle = new HashMap(intResult.get(0));
intResult.add(0,colTitle);

for(String i : intResult.get(0).keySet()){
	
	colTitle.put(i,i);
	}

intResult.add(0,resTitle);

totResult.addAll(intResult);

vars.putObject(&quot;totalResult&quot;, totResult);


</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Write to File" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.io.File;
import org.apache.jmeter.services.FileServer;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.ArrayList;
import org.apache.commons.io.FilenameUtils;

try{
	
String testPlanFile = FileServer.getFileServer().getBaseDir();

String path = testPlanFile + &quot;\\ExitFile.csv&quot;;

log.info(&quot;testPlanFileDir:&quot; + path);
//String reppath = testPlanFileDir + &quot;\\Summary.csv&quot;;
//vars.putObject(&quot;rpath&quot;,reppath);
//log.info(&quot;The report path is :&quot; + vars.getObject(&quot;rpath&quot;));

File resultFile = new File(path);
FileWriter fileStream = new FileWriter(resultFile, true); // true, will append the file if already exist

BufferedWriter outFile = new BufferedWriter(fileStream);

ArrayList result = vars.getObject(&quot;totalResult&quot;);

for (HashMap row: result){
	 
    for(String i: row.keySet()){
    	outFile.write(row.get(i) + &quot;,&quot;); 
    	}
        outFile.write(&quot;\n&quot;);
    
}

outFile.close();
fileStream.close();

}catch (Throwable ex) {
    log.error(&quot;Failed to write results to file!!!&quot;, ex);
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;  //jmeter spelling corrected
import java.util.Date
import java.text.*;  
import java.util.Calendar;  


try {
   
Date dataStart = new Date();

long longMsStart = dataStart.getTime();
String StringMsStart = String.valueOf(longMsStart);

vars.putObject(&quot;startWrite&quot;, StringMsStart);


}

catch (Throwable ex) {
    log.error(&quot;Failed to get the starting time for writing to file !!!&quot;, ex);
}
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;  //jmeter spelling corrected
import org.apache.commons.io.FileUtils;
import java.util.Date
import java.text.DateFormat;  
import java.text.SimpleDateFormat;  
import java.util.Date;  
import java.util.Calendar;  
import java.io.File;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Arrays;
import java.io.Writer;
import org.apache.commons.io.FilenameUtils;

try {
    

String testPlanFile = FileServer.getFileServer().getBaseDir();
vars.put(&quot;testPlanFile&quot;, testPlanFile);

String path = testPlanFile +  &quot;\\\\TimesFile.csv&quot;;


Date dataEnd = new Date();
long longMsEnd = dataEnd.getTime();

String stringMsStart = vars.getObject(&quot;startWrite&quot;);
long longMsStart = Long.parseLong(stringMsStart);

long difference = longMsEnd - longMsStart;

BufferedWriter bw = null;
FileWriter fw = null;
File file = new File(path);
if (!file.exists()) {
	file.createNewFile();
}
writer = new FileWriter(path, true);
bufwriter = new BufferedWriter(writer);

//var writer = new java.io.PrintWriter(new FileWriter(path,true));

bufwriter.println(&quot;Write to File Execution time:,&quot; + String.valueOf(difference) + &quot;,&quot; + &quot;Ms&quot;);

//writer.close();
bufwriter.close();
log.info(&quot;Write to File: start:&quot; + String.valueOf(longMsStart) + &quot;end: &quot; + String.valueOf(longMsEnd)  + &quot;difference: &quot; + String.valueOf(difference) +&quot;\n&quot;);

vars.putObject(&quot;startWrite&quot;, &quot;0&quot;);

}catch (Throwable ex) {
    log.error(&quot;Failed get the writing to file duration !!!&quot;, ex);
}
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report - " enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
